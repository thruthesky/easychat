rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Master can change all the fields.
    // Moderator can only change some of the fields.
    // Chat members can only add or delete their own uid into `users` field.
    match /easychat/{roomId} {

      function roomData() {
        return get(/databases/$(database)/documents/easychat/$(roomId)).data;
      }

      // function isMaster() {
      //   return  roomData().master == request.auth.uid;
      // }
      // function isModerator() {
      //   return 'moderators' in roomData() && roomData().moderators.hasAny([request.auth.uid]);
      // }
      // function isMyself() {
      //   return 'uid' in request.resource.data && request.resource.data.uid == request.auth.uid;
      // }
      // function isOpen() {
      //   return 'open' in roomData() && roomData().open;
      // }

      function isMember() {
        return 'users' in request.resource.data && request.resource.data.users.hasAny([request.auth.uid]);
      }

      allow get: if true;
      allow list: if true;
      allow create: if 
        // all rooms must have these fields.
        required(['master', 'createdAt', 'group', 'open', 'users'])
        &&
        (
          (request.resource.data.group == false && request.resource.data.users.size() == 2) 
          // if it's NOT a group chat (means it's a single chat room), upon creation of the room, there should be 2 members of the room.
          || 
          // if it's a group, upon creation of room, the room must have only one member
          (request.resource.data.group == true && request.resource.data.users.size() == 1)
        )
        &&
        // The master uid must always be in the users field.
        request.resource.data.users.hasAny([request.resource.data.master])
        &&
        // The master uid must be the creator.
        request.resource.data.master == request.auth.uid;
      
      allow update: if false;
      allow delete: if false;

      // match /users/{userId} {
      //   allow create: if isMaster() || isModerator() || (isOpen() && isMyself());
      //   allow delete: if request.auth.uid == userId;
      // }

      match /messages/{messageId} {
        // allow create: if isMember();
        // TODO check if member of the chat room
        allow create: if true;
        allow update: if false;
        allow delete: if false;
      }
    }
    

    match /readonly/{documentId} {
      allow read: if true;
      allow write: if false;
    }
    match /users/{documentId} {
      allow read, write: if true;
    }
  }

}

// * Warning : It's check the fields after save.
// * Warning : !!! It's not checking the incoming data fields !!!
function required(fields) {
  return request.resource.data.keys().hasAll( fields );
}
