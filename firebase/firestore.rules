rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function prefix() {
      return /databases/$(database)/documents;
    }

    match /{document=**} {
      allow read, write: if false;
    }

    // Master can change all the fields.
    // Moderator can only change some of the fields.
    // Chat members can only add or delete their own uid into `users` field.
    match /easychat/{roomId} {


      
      function isMaster() {
        return  resource.data.master == request.auth.uid;
      }
      function isModerator() {
        return 'moderators' in resource.data && resource.data.moderators.hasAny([request.auth.uid]);
      }
      function isRoomUser() {
        return resource.data.users.hasAny([request.auth.uid]);
      }
      function isRoomNotExist() {
        return resource == null;
      }
      function isOpen() {
        return 'open' in resource.data && resource.data.open;
      }
      function isGroupChat() {
        return 'group' in resource.data && resource.data.group;
      }
      function isModifyingUsers() {
        return 'users' in request.resource.data;
      }
      function isModifyingModerators() {
        return 'moderators' in request.resource.data;
      }
      
      // function isOpen() {
      //   return 'open' in roomData() && roomData().open;
      // }


      allow read: if isRoomUser() || isRoomNotExist();
      allow create: if 
        // all rooms must have these fields.
        required(['master', 'createdAt', 'group', 'open', 'users'])
        &&
        (
          (willBeSingleChat() && usersSize() == 2) // if it's a single chat, there must be 2 members of the room.
          || 
          (willBeGroupChat() && usersSize() == 1) // if it's a group, there must have only one member
        )
        &&
        // The master uid must always be in the users field.
        request.resource.data.users.hasAny([request.resource.data.master])
        &&
        // The master uid must be the creator.
        request.resource.data.master == request.auth.uid;
      
      allow update: if
        (
          isModifyingUsers() // should only check for modifying users in a chat room
          &&
          isGroupChat() // it should be a group chat to add
          &&
          (
            isMaster() // Master and Moderator can invite in group chat regardless if open/closed
            ||
            isModerator()
            ||
            (isOpen() && isRoomUser()) // a room user can only invite if the group chat is open
          )
        )
        ||
        (
          isModifyingModerators() // should only check for modifying users in a chat room
          &&
          isGroupChat() // it should be a group chat to add
          &&
          (
            isMaster() // based on notes, only mentioned that master can set moderators.
            && 
            isRoomUser()
          ) 
        );
      allow delete: if false;


      match /messages/{messageId} {
        function isMyMessage() {
          return 'uid' in request.resource.data && request.resource.data.uid == request.auth.uid;
        }
        function roomData() {
          return get(/$(prefix())/easychat/$(roomId)).data;
        }
        function isRoomUser() {
          return 'users' in roomData() && roomData().users.hasAny([request.auth.uid]);
        }
        allow read: if isRoomUser();
        allow create: if isRoomUser();
        allow update: if isMyMessage();
        allow delete: if isMyMessage();
      }
    }
    

    match /readonly/{documentId} {
      allow read: if true;
      allow write: if false;
    }
    match /users/{documentId} {
      allow read, write: if true;
    }

  }




}

// * Warning : It's check the fields after save.
// * Warning : !!! It's not checking the incoming data fields !!!
function required(fields) {
  return request.resource.data.keys().hasAll( fields );
}

function willBeGroupChat() {
  return request.resource.data.group == true;
}

function willBeSingleChat() {
  return request.resource.data.group == false;
}

// Returns the number of users in the room. Count without uinique uids.
// ! After save
function usersSize() {
  return request.resource.data.users.toSet().size();
}
